 /* Program to SET-UP Colossal Cave database. Should be run by          ADS00010    the local "wizard". It expects to read from CAVES and               ADS00020    write to ADVENTUR SAVEFILE A. The following instructions assume thatADS00030    THIS IS LOCATED IN A FILE CALLED ADSETUP PLIOPT A AND THAT          ADS00040    ADVTXT TXTLIB A (which contains the results of the assembly         ADS00050    of certain non-PL/I routines) is available.                         ADS00060                                                                        ADS00070        GLOBAL TXTLIB ADVTXT PLILIB CMSLIB                              ADS00080        PLIOPT  ADSETUP                                                 ADS00090        FILEDEF CAVES DISK CAVES DATA A                                 ADS00100        LOAD ADSETUP                                                    ADS00110        START                                                           ADS00120                                                                        ADS00130 ============================================================           ADS00140                                                                        ADS00150    CURRENT LIMITS:                                                     ADS00160        9650 WORDS OF MESSAGE TEXT (LINES, LINSIZ).                     ADS00170         750 TRAVEL OPTIONS (TRAVEL, TRVSIZ).                           ADS00180         300 VOCABULARY WORDS (KTAB, ATAB, TABSIZ).                     ADS00190         150 LOCATIONS (LTEXT, STEXT, KEY, COND, ABB, ATLOC, LOCSIZ).   ADS00200         100 OBJECTS (PLAC, PLACE, FIXD, FIXED, LINK (TWICE), PTEXT,    ADS00210                     PROP).                                             ADS00220          35 "ACTION" VERBS (ACTSPK, VRBSIZ).                           ADS00230         205 RANDOM MESSAGES (RTEXT, RTXSIZ).                           ADS00240          12 DIFFERENT PLAYER CLASSIFICATIONS (CTEXT, CVAL, CLSMAX).    ADS00250          20 HINTS, LESS 3 (HINTLC, HINTED, HINTS, HNTSIZ).             ADS00260          35 MAGIC MESSAGES (MTEXT, MAGSIZ).                            ADS00270                                                                        ADS00280    THERE ARE ALSO LIMITS WHICH CANNOT BE EXCEEDED DUE TO THE           ADS00290    STRUCTURE OF THE DATABASE.  (E.G., THE VOCABULARY USES              ADS00300    N/1000 TO DETERMINE WORD TYPE, SO THERE CAN'T BE MORE               ADS00310    THAN 1000 WORDS.) THESE UPPER LIMITS ARE:                           ADS00320                                                                        ADS00330         1000 NON-SYNONYMOUS VOCABULARY WORDS                           ADS00340         300 LOCATIONS                                                  ADS00350         100 OBJECTS                                                    ADS00360  */                                                                    ADS00370                                                                        ADS003801                                                                       ADS00390 /* (SUBSCRIPTRANGE,STRINGRANGE):  */                                   ADS00400 ADSETUP: PROC OPTIONS (MAIN);                                          ADS00410                                                                        ADS00420       DCL  CAVES        FILE INPUT;                                    ADS00430                                                                        ADS00440       DCL IRC   FIXED BIN(31) ;                                        ADS00450                                                                        ADS00460       DCL SAVEFL ENTRY (CHAR(8),CHAR(8),CHAR(8),                       ADS00470               FIXED BIN(31),FIXED BIN(31),                             ADS00480               FIXED BIN(31),FIXED BIN(31),                             ADS00490               FIXED BIN(31),FIXED BIN(31),                             ADS00500               FIXED BIN(31),FIXED BIN(31),                             ADS00510               FIXED BIN(31),FIXED BIN(31),                             ADS00520               FIXED BIN(31),FIXED BIN(31),                             ADS00530               FIXED BIN(31),FIXED BIN(31),                             ADS00540               FIXED BIN(31),FIXED BIN(31),                             ADS00550               FIXED BIN(31)                                            ADS00560               ) OPTIONS (ASM INTER);                                   ADS00570                                                                        ADS00580                                                                        ADS00590       DCL TREAD ENTRY (CHAR(133),FIXED BIN(31),CHAR(133),              ADS00600               FIXED BIN(31),FIXED BIN(31)) OPTIONS (ASM INTER);        ADS00610                                                                        ADS00620       DCL TWRITE ENTRY (CHAR(133),FIXED BIN(31),FIXED BIN(31))         ADS00630               OPTIONS (ASM INTER);                                     ADS00640                                                                        ADS00650       DCL RANDU ENTRY (FIXED BIN(31),FIXED BIN(31),FLOAT BIN(31))      ADS00660               OPTIONS (ASM INTER);                                     ADS00670                                                                        ADS00680       DCL ITIME ENTRY (FIXED BIN(31)) OPTIONS (ASM INTER);             ADS00690                                                                        ADS00700         DCL 1 TXTCOM STATIC,                                           ADS00710               2 RTEXT(205) FIXED BIN(31),                              ADS00720               2 LINES(9650) CHAR(5);                                   ADS00730                                                                        ADS00740         DCL 1 BLKCOM STATIC,                                           ADS00750               2 BLKLIN BIT(1) INIT ('1'B);                             ADS00760                                                                        ADS00770         DCL 1 PTXCOM STATIC,                                           ADS00780               2 PTEXT(100) FIXED BIN(31);                              ADS00790                                                                        ADS00800         DCL 1 VOCCOM STATIC,                                           ADS00810               2 KTAB(300) FIXED BIN(31),                               ADS00820               2 ATAB(300) CHAR(5),                                     ADS00830               2 TABSIZ FIXED BIN(31) INIT(300);                        ADS00840                                                                        ADS00850         DCL 1 PLACOM STATIC,                                           ADS00860               2 ATLOC(150) FIXED BIN(31),                              ADS00870               2 LINK(200) FIXED BIN(31),                               ADS00880               2 PLACE(100) FIXED BIN(31),                              ADS00890               2 FIXED(100) FIXED BIN(31),                              ADS00900               2 HOLDNG FIXED BIN(31);                                  ADS00910                                                                        ADS00920         DCL 1 ABBCOM STATIC,                                           ADS00930               2 ABB(150) FIXED BIN(31);                                ADS00940                                                                        ADS00950                                                                        ADS00960          DCL PICWORD PICTURE 'S9999' STATIC;                           ADS00970                                                                        ADS009801  DCL 1  ADVARS STATIC,                                                ADS00990       2  ABBNUM       FIXED BIN(31)  INIT(0),                          ADS01000       2  IX           FIXED BIN(31)  INIT (65549),                     ADS01010       2  IY           FIXED BIN(31)  INIT(0),                          ADS01020       2  Y            FLOAT BIN(31) ,                                  ADS01030       2  AXE          FIXED BIN(31)  INIT(0),                          ADS01040       2  BACK         FIXED BIN(31)  INIT(0),                          ADS01050       2  BATTER       FIXED BIN(31)  INIT(0),                          ADS01060       2  BEAR         FIXED BIN(31)  INIT(0),                          ADS01070       2  BIRD         FIXED BIN(31)  INIT(0),                          ADS01080       2  BONUS        FIXED BIN(31)  INIT(0),                          ADS01090       2  BOTTLE       FIXED BIN(31)  INIT(0),                          ADS01100       2  CAGE         FIXED BIN(31)  INIT(0),                          ADS01110       2  CAVE         FIXED BIN(31)  INIT(0),                          ADS01120       2  CCODE        FIXED BIN(31)  INIT(0),                          ADS01130       2  CH           FIXED BIN(31)  INIT(0),                          ADS01140       2  CHAIN        FIXED BIN(31)  INIT(0),                          ADS01150       2  CHASM        FIXED BIN(31)  INIT(0),                          ADS01160       2  CHEST        FIXED BIN(31)  INIT(0),                          ADS01170       2  CHLOC        FIXED BIN(31)  INIT(0),                          ADS01180       2  CHLOC2       FIXED BIN(31)  INIT(0),                          ADS01190       2  CLAM         FIXED BIN(31)  INIT(0),                          ADS01200       2  CLOCK1       FIXED BIN(31)  INIT(0),                          ADS01210       2  CLOCK2       FIXED BIN(31)  INIT(0),                          ADS01220       2  CLSSES       FIXED BIN(31)  INIT(0),                          ADS01230       2  CLSSIZ       FIXED BIN(31)  INIT(12),                         ADS01240       2  COINS        FIXED BIN(31)  INIT(0),                          ADS01250       2  DALTLC       FIXED BIN(31)  INIT(0),                          ADS01260       2  DETAIL       FIXED BIN(31)  INIT(0),                          ADS01270       2  DFLAG        FIXED BIN(31)  INIT(0),                          ADS01280       2  DKILL        FIXED BIN(31)  INIT(0),                          ADS01290       2  DOOR         FIXED BIN(31)  INIT(0),                          ADS01300       2  DPRSSN       FIXED BIN(31)  INIT(0),                          ADS01310       2  DRAGON       FIXED BIN(31)  INIT(0),                          ADS01320       2  DTOTAL       FIXED BIN(31)  INIT(0),                          ADS01330       2  DWARF        FIXED BIN(31)  INIT(0),                          ADS01340       2  EGGS         FIXED BIN(31)  INIT(0),                          ADS01350       2  EMRALD       FIXED BIN(31)  INIT(0),                          ADS01360       2  ENTRNC       FIXED BIN(31)  INIT(0),                          ADS01370       2  FIND         FIXED BIN(31)  INIT(0),                          ADS01380       2  FISSUR       FIXED BIN(31)  INIT(0),                          ADS01390       2  FOO          FIXED BIN(31)  INIT(0),                          ADS01400       2  FOOBAR       FIXED BIN(31)  INIT(0),                          ADS01410       2  FOOD         FIXED BIN(31)  INIT(0),                          ADS01420       2  FROM         FIXED BIN(31)  INIT(0),                          ADS01430       2  GRATE        FIXED BIN(31)  INIT(0),                          ADS01440       2  HINT         FIXED BIN(31)  INIT(0),                          ADS01450       2  HINTLC(20)   FIXED BIN(31)  INIT((20)0),                      ADS01460       2  HNTMAX       FIXED BIN(31)  INIT(0),                          ADS01470       2  I            FIXED BIN(31)  INIT(0),                          ADS01480       2  INLEN        FIXED BIN(31)  INIT(0),                          ADS01490       2  INSTR        CHAR(133) ,                                      ADS01500       2  INVENT       FIXED BIN(31)  INIT(0),                          ADS01510       2  IWEST        FIXED BIN(31)  INIT(0),                          ADS01520       2  J            FIXED BIN(31)  INIT(0),                          ADS01530       2  JUNK1        CHAR(5) ,                                        ADS01540       2  JUNK2        CHAR(5) ,                                        ADS01550       2  JUNK3        CHAR(5) ,                                        ADS01560       2  K            FIXED BIN(31)  INIT(0),                          ADS01570       2  KEYS         FIXED BIN(31)  INIT(0),                          ADS01580       2  KK           FIXED BIN(31)  INIT(0),                          ADS01590       2  KKWORD       CHAR(2) ,                                        ADS01600       2  KNFLOC       FIXED BIN(31)  INIT(0),                          ADS01610       2  KNIFE        FIXED BIN(31)  INIT(0),                          ADS01620       2  KQ           FIXED BIN(31)  INIT(0),                          ADS01630       2  K2           FIXED BIN(31)  INIT(0),                          ADS01640       2  L            FIXED BIN(31)  INIT(0),                          ADS01650       2  LAMP         FIXED BIN(31)  INIT(0),                          ADS01660       2  LIMIT        FIXED BIN(31)  INIT(0),                          ADS01670       2  LINUSE       FIXED BIN(31)  INIT(0),                          ADS01680       2  LL           FIXED BIN(31)  INIT(0),                          ADS01690       2  LOC          FIXED BIN(31)  INIT(0),                          ADS01700       2  LOCK         FIXED BIN(31)  INIT(0),                          ADS01710       2  LOOK         FIXED BIN(31)  INIT(0),                          ADS01720       2  M            FIXED BIN(31)  INIT(0),                          ADS01730       2  MAGZIN       FIXED BIN(31)  INIT(0),                          ADS01740       2  MAXDIE       FIXED BIN(31)  INIT(0),                          ADS01750       2  MAXTRS       FIXED BIN(31)  INIT(0),                          ADS01760       2  MESSAG       FIXED BIN(31)  INIT(0),                          ADS01770       2  MIRROR       FIXED BIN(31)  INIT(0),                          ADS01780       2  MXSCOR       FIXED BIN(31)  INIT(0),                          ADS01790       2  NEWLOC       FIXED BIN(31)  INIT(0),                          ADS01800       2  NUGGET       FIXED BIN(31)  INIT(0),                          ADS01810       2  NULLX        FIXED BIN(31)  INIT(0),                          ADS01820       2  NUMDIE       FIXED BIN(31)  INIT(0),                          ADS01830       2  OBJ          FIXED BIN(31)  INIT(0),                          ADS01840       2  OIL          FIXED BIN(31)  INIT(0),                          ADS01850       2  OLDLC2       FIXED BIN(31)  INIT(0),                          ADS01860       2  OLDLOC       FIXED BIN(31)  INIT(0),                          ADS01870       2  OUTSTR       CHAR(133) VAR ,                                  ADS01880       2  OYSTER       FIXED BIN(31)  INIT(0),                          ADS01890       2  PEARL        FIXED BIN(31)  INIT(0),                          ADS01900       2  PILLOW       FIXED BIN(31)  INIT(0),                          ADS01910       2  PLANT        FIXED BIN(31)  INIT(0),                          ADS01920       2  PLANT2       FIXED BIN(31)  INIT(0),                          ADS01930       2  POSN         FIXED BIN(31)  INIT(0),                          ADS01940       2  PYRAM        FIXED BIN(31)  INIT(0),                          ADS01950       2  REPLY        CHAR(5) ,                                        ADS01960       2  ROD          FIXED BIN(31)  INIT(0),                          ADS01970       2  ROD2         FIXED BIN(31)  INIT(0),                          ADS01980       2  RUG          FIXED BIN(31)  INIT(0),                          ADS01990       2  SAY          FIXED BIN(31)  INIT(0),                          ADS02000       2  SCORE        FIXED BIN(31)  INIT(0),                          ADS02010       2  SECT         FIXED BIN(31)  INIT(0),                          ADS02020       2  SNAKE        FIXED BIN(31)  INIT(0),                          ADS02030       2  SPICES       FIXED BIN(31)  INIT(0),                          ADS02040       2  SPK          FIXED BIN(31)  INIT(0),                          ADS02050       2  STEPS        FIXED BIN(31)  INIT(0),                          ADS02060       2  STICK        FIXED BIN(31)  INIT(0),                          ADS02070       2  TABLET       FIXED BIN(31)  INIT(0),                          ADS02080       2  TABNDX       FIXED BIN(31)  INIT(0),                          ADS02090       2  TALLY        FIXED BIN(31)  INIT(0),                          ADS02100       2  TALLY2       FIXED BIN(31)  INIT(0),                          ADS02110       2  TEMP         FIXED BIN(31)  INIT(0),                          ADS02120       2  THROW        FIXED BIN(31)  INIT(0),                          ADS02130       2  TRAVEL(750)  FIXED BIN(31)  INIT((750)0),                     ADS02140       2  ATTACK       FIXED BIN(31)  INIT(0),                          ADS02150       2  TRIDNT       FIXED BIN(31)  INIT(0),                          ADS02160       2  TROLL        FIXED BIN(31)  INIT(0),                          ADS02170       2  TROLL2       FIXED BIN(31)  INIT(0),                          ADS02180       2  TRVS         FIXED BIN(31)  INIT(0),                          ADS02190       2  TURNS        FIXED BIN(31)  INIT(0),                          ADS02200       2  VASE         FIXED BIN(31)  INIT(0),                          ADS02210       2  VEND         FIXED BIN(31)  INIT(0),                          ADS02220       2  VERB         FIXED BIN(31)  INIT(0),                          ADS02230       2  WATER        FIXED BIN(31)  INIT(0),                          ADS02240       2  WD1          CHAR(5) ,                                        ADS02250       2  WD1X         CHAR(5) ,                                        ADS02260       2  WD2          CHAR(5) ,                                        ADS02270       2  WD2X         CHAR(5) ,                                        ADS02280       2  WORD         FIXED BIN(31)  INIT(0),                          ADS02290       2  WORDEND      FIXED BIN(31)  INIT(0),                          ADS02300       2  WORDSIZE     FIXED BIN(31)  INIT(0),                          ADS02310       2  WORDSTRT     FIXED BIN(31)  INIT(0),                          ADS02320       2  LTEXT(150)   FIXED BIN(31)  INIT((150)0),                     ADS02330       2  STEXT(150)   FIXED BIN(31)  INIT((150)0),                     ADS02340       2  KEY(150)     FIXED BIN(31)  INIT((150)0),                     ADS02350       2  COND(150)    FIXED BIN(31)  INIT((150)0),                     ADS02360       2  PLAC(100)    FIXED BIN(31)  INIT((100)0),                     ADS02370       2  FIXD(100)    FIXED BIN(31)  INIT((100)0),                     ADS02380       2  PROP(100)    FIXED BIN(31)  INIT((100)0),                     ADS02390       2  ACTSPK(35)   FIXED BIN(31)  INIT((35)0),                      ADS02400       2  CTEXT(12)    FIXED BIN(31)  INIT((12)0),                      ADS02410       2  CVAL(12)     FIXED BIN(31)  INIT((12)0),                      ADS02420       2  HINTS(20,4)  FIXED BIN(31)  INIT((80)0),                      ADS02430       2  HINTED(20)   BIT(1) ,                                         ADS02440       2  TK(20)       FIXED BIN(31) ,                                  ADS02450       2  TKWORD(10)   CHAR(1) ,                                        ADS02460       2  DLOC(6)      FIXED BIN(31) ,                                  ADS02470       2  ODLOC(6)     FIXED BIN(31) ,                                  ADS02480       2  DSEEN(6)     BIT(1) ,                                         ADS02490       2  LINSIZ       FIXED BIN(31) INIT (9650) ,                      ADS02500       2  TRVSIZ       FIXED BIN(31) INIT (750) ,                       ADS02510       2  LOCSIZ       FIXED BIN(31) INIT (150) ,                       ADS02520       2  VRBSIZ       FIXED BIN(31) INIT (35) ,                        ADS02530       2  RTXSIZ       FIXED BIN(31) INIT (205) ,                       ADS02540       2  CLSMAX       FIXED BIN(31) INIT (12) ,                        ADS02550       2  HNTSIZ       FIXED BIN(31) INIT (20) ,                        ADS02560       2  WZDARK       BIT(1) ,                                         ADS02570       2  LMWARN       BIT(1) ,                                         ADS02580       2  CLOSNG       BIT(1) ,                                         ADS02590       2  PANIC        BIT(1) ,                                         ADS02600       2  CLOSED       BIT(1) ,                                         ADS02610       2  GAVEUP       BIT(1) ,                                         ADS02620       2  SCORNG       BIT(1) ,                                         ADS02630       2  LOGON        BIT(1) INIT ('0'B),                              ADS02640       2  YEA          BIT(1) ;                                         ADS02650                                                                        ADS026601/*                                                                     ADS02670                                                                        ADS02680    WZDARK SAYS WHETHER THE LOC HE'S LEAVING WAS DARK                   ADS02690    LMWARN SAYS WHETHER HE'S BEEN WARNED ABOUT LAMP GOING DIM           ADS02700    CLOSNG SAYS WHETHER ITS CLOSING TIME YET                            ADS02710    PANIC SAYS WHETHER HE'S FOUND OUT HE'S TRAPPED IN THE               ADS02720    CAVE                                                                ADS02730    CLOSED SAYS WHETHER WE'RE ALL THE WAY CLOSED                        ADS02740    GAVEUP SAYS WHETHER HE EXITED VIA "QUIT"                            ADS02750    SCORNG INDICATES TO THE SCORE ROUTINE WHETHER WE'RE DOING           ADS02760    A "SCORE" COMMAND                                                   ADS02770    YEA IS RANDOM YES/NO REPLY                                          ADS02780                                                                        ADS02790  */                                                                    ADS02800                                                                        ADS028101/*  DESCRIPTION OF THE DATABASE FORMAT                                 ADS02820                                                                        ADS02830                                                                        ADS02840    THE DATA FILE CONTAINS SEVERAL SECTIONS.  EACH BEGINS               ADS02850    WITH A LINE CONTAINING A NUMBER IDENTIFYING THE SECTION,            ADS02860    AND ENDS WITH A LINE CONTAINING "-1".                               ADS02870                                                                        ADS02880    SECTION 1:  LONG FORM DESCRIPTIONS.  EACH LINE CONTAINS A           ADS02890        LOCATION NUMBER, A TAB, AND A LINE OF TEXT.  THE SET            ADS02900        OF (NECESSARILY ADJACENT) LINES WHOSE NUMBERS ARE X             ADS02910        FORM THE LONG DESCRIPTION OF LOCATION X.                        ADS02920    SECTION 2:  SHORT FORM DESCRIPTIONS.  SAME FORMAT AS LONG           ADS02930        FORM.  NOT ALL PLACES HAVE SHORT DESCRIPTIONS.                  ADS02940    SECTION 3:  TRAVEL TABLE.  EACH LINE CONTAINS A LOCATION            ADS02950        NUMBER (X), A SECOND LOCATION NUMBER (Y), AND A LIST            ADS02960        OF MOTION NUMBERS (SEE SECTION 4).  EACH MOTION                 ADS02970        REPRESENTS A VERB WHICH WILL GO TO Y IF CURRENTLY AT            ADS02980        X.  Y, IN TURN, IS INTERPRETED AS FOLLOWS.  LET                 ADS02990        M=Y/1000, N=Y MOD 1000.                                         ADS03000                IF N<=300       IT IS THE LOCATION TO GO TO.            ADS03010                IF 300<N<=500   N-300 IS USED IN A COMPUTED             ADS03020                                GOTO TO A SECTION OF SPECIAL            ADS03030                                CODE.                                   ADS03040                IF N>500        MESSAGE N-500 FROM SECTION 6            ADS03050                                IS PRINTED, AND HE STAYS                ADS03060                                WHEREVER HE IS.                         ADS03070        MEANWHILE, M SPECIFIES THE CONDITIONS ON THE MOTION.            ADS03080                IF M=0          IT'S UNCONDITIONAL.                     ADS03090                IF 0<M<100      IT IS DONE WITH M%                      ADS03100                                PROBABILITY.                            ADS03110                IF M=100        UNCONDITIONAL, BUT FORBIDDEN            ADS03120                                TO DWARVES.                             ADS03130                IF 100<M<=200   HE MUST BE CARRYING OBJECT              ADS03140                                M-100.                                  ADS03150                IF 200<M<=300   MUST BE CARRYING OR IN SAME             ADS03160                                ROOM                                    ADS03170                                        AS M-200.                       ADS03180                IF 300<M<=400   PROP(M MOD 100) MUST *NOT* BE           ADS03190                                0.                                      ADS03200                IF 400<M<=500   PROP(M MOD 100) MUST *NOT* BE           ADS03210                                1.                                      ADS03220                IF 500<M<=600   PROP(M MOD 100) MUST *NOT* BE           ADS03230                                2, ETC.                                 ADS03240        IF THE CONDITION (IF ANY) IS NOT MET, THEN THE NEXT             ADS03250        *DIFFERENT* "DESTINATION" VALUE IS USED (UNLESS IT              ADS03260        FAILS TO MEET *ITS* CONDITIONS, IN WHICH CASE THE               ADS03270        NEXT IS FOUND, ETC.).  TYPICALLY, THE NEXT DEST WILL            ADS03280        BE FOR ONE OF THE SAME VERBS, SO THAT ITS ONLY USE IS           ADS03290        AS THE ALTERNATE DESTINATION FOR THOSE VERBS.  FOR              ADS03300        INSTANCE:                                                       ADS03310            15      110022  29      31      34      35      23      43  ADS03320            15      14      29                                          ADS03330        THIS SAYS THAT, FROM LOC 15, ANY OF THE VERBS 29, 31,           ADS03340        ETC., WILL TAKE HIM TO 22 IF HE'S CARRYING OBJECT 10,           ADS03350        AND OTHERWISE WILL GO TO 14.                                    ADS03360                11      303008  49                                      ADS03370                11      9       50                                      ADS03380        THIS SAYS THAT, FROM 11, 49 TAKES HIM TO 8 UNLESS               ADS03390        PROP(3)=0, IN WHICH CASE HE GOES TO 9.  VERB 50 TAKES           ADS03400        HIM TO 9 REGARDLESS OF PROP(3).                                 ADS03410    SECTION 4:  VOCABULARY.  EACH LINE CONTAINS A NUMBER (N),           ADS03420        A TAB, AND A FIVE-LETTER WORD.  CALL M=N/1000.  IF              ADS03430        M=0, THEN THE WORD IS A MOTION VERB FOR USE IN                  ADS03440        TRAVELLING (SEE SECTION 3).  ELSE, IF M=1, THE WORD             ADS03450        IS AN OBJECT.  ELSE, IF M=2, THE WORD IS AN ACTION              ADS03460        VERB (SUCH AS "CARRY" OR "ATTACK").  ELSE, IF M=3,              ADS03470        THE WORD IS A SPECIAL CASE VERB (SUCH AS "DIG") AND N           ADS03480        MOD 1000 IS AN INDEX INTO SECTION 6.  OBJECTS FROM 50           ADS03490        TO (CURRENTLY, ANYWAY) 79 ARE CONSIDERED TREASURES              ADS03500        (FOR PIRATE, CLOSEOUT).                                         ADS03510    SECTION 5:  OBJECT DESCRIPTIONS.  EACH LINE CONTAINS A              ADS03520        NUMBER (N), A TAB, AND A MESSAGE.  IF N IS FROM 1 TO            ADS03530        100, THE MESSAGE IS THE "INVENTORY" MESSAGE FOR                 ADS03540        OBJECT N.  OTHERWISE, N SHOULD BE 000, 100, 200,                ADS03550        ETC., AND THE MESSAGE SHOULD BE THE DESCRIPTION OF              ADS03560        THE PRECEDING OBJECT WHEN ITS PROP VALUE IS N/100.              ADS03570        THE N/100 IS USED ONLY TO DISTINGUISH MULTIPLE                  ADS03580        MESSAGES FROM MULTI-LINE MESSAGES; THE PROP INFO                ADS03590        ACTUALLY REQUIRES ALL MESSAGES FOR AN OBJECT TO BE              ADS03600        PRESENT AND CONSECUTIVE.  PROPERTIES WHICH PRODUCE NO           ADS03610        MESSAGE SHOULD BE GIVEN THE MESSAGE ">$<".                      ADS03620    SECTION 6:  ARBITRARY MESSAGES.  SAME FORMAT AS SECTIONS            ADS03630        1, 2, AND 5, EXCEPT THE NUMBERS BEAR NO RELATION TO             ADS03640        ANYTHING (EXCEPT FOR SPECIAL VERBS IN SECTION 4).               ADS03650    SECTION 7:  OBJECT LOCATIONS.  EACH LINE CONTAINS AN                ADS03660        OBJECT NUMBER AND ITS INITIAL LOCATION (ZERO (OR                ADS03670        OMITTED) IF NONE).  IF THE OBJECT IS IMMOVABLE, THE             ADS03680        LOCATION IS FOLLOWED BY A "-1".  IF IT HAS TWO                  ADS03690        LOCATIONS (E.G.  THE GRATE) THE FIRST LOCATION IS               ADS03700        FOLLOWED WITH THE SECOND, AND THE OBJECT IS ASSUMED             ADS03710        TO BE IMMOVABLE.                                                ADS03720    SECTION 8:  ACTION DEFAULTS.  EACH LINE CONTAINS AN                 ADS03730        "ACTION-VERB" NUMBER AND THE INDEX (IN SECTION 6) OF            ADS03740        THE DEFAULT MESSAGE FOR THE VERB.                               ADS03750    SECTION 9:  LIQUID ASSETS, ETC.  EACH LINE CONTAINS A               ADS03760        NUMBER (N) AND UP TO 20 LOCATION NUMBERS.  BIT N                ADS03770        (WHERE 0 IS THE UNITS BIT) IS SET IN COND(LOC) FOR              ADS03780        EACH LOC GIVEN.  THE COND BITS CURRENTLY ASSIGNED               ADS03790        ARE:                                                            ADS03800                0       LIGHT                                           ADS03810                1       IF BIT 2 IS ON:  ON FOR OIL, OFF FOR            ADS03820                        WATER                                           ADS03830                2       LIQUID ASSET, SEE BIT 1                         ADS03840                3       PIRATE DOESN'T GO HERE UNLESS                   ADS03850                        FOLLOWING PLAYER                                ADS03860        OTHER BITS ARE USED TO INDICATE AREAS OF INTEREST TO            ADS03870        "HINT" ROUTINES:                                                ADS03880                4       TRYING TO GET INTO CAVE                         ADS03890                5       TRYING TO CATCH BIRD                            ADS03900                6       TRYING TO DEAL WITH SNAKE                       ADS03910                7       LOST IN MAZE                                    ADS03920                8       PONDERING DARK ROOM                             ADS03930                9       AT WITT'S END                                   ADS03940        COND(LOC) IS SET TO 2, OVERRIDING ALL OTHER BITS, IF            ADS03950        LOC HAS FORCED MOTION.                                          ADS03960    SECTION 10:  CLASS MESSAGES.  EACH LINE CONTAINS A NUMBER           ADS03970        (N), A TAB, AND A MESSAGE DESCRIBING A CLASSIFICATION           ADS03980        OF PLAYER.  THE SCORING SECTION SELECTS THE                     ADS03990        APPROPRIATE MESSAGE, WHERE EACH MESSAGE IS CONSIDERED           ADS04000        TO APPLY TO PLAYERS WHOSE SCORES ARE HIGHER THAN THE            ADS04010        PREVIOUS N BUT NOT HIGHER THAN THIS N.  NOTE THAT               ADS04020        THESE SCORES PROBABLY CHANGE WITH EVERY MODIFICATION            ADS04030        (AND PARTICULARLY EXPANSION) OF THE PROGRAM.                    ADS04040    SECTION 11:  HINTS.  EACH LINE CONTAINS A HINT NUMBER               ADS04050        (CORRESPONDING TO A COND BIT, SEE SECTION 9), THE               ADS04060        NUMBER OF TURNS HE MUST BE AT THE RIGHT LOC(S) BEFORE           ADS04070        TRIGGERING THE HINT, THE POINTS DEDUCTED FOR TAKING             ADS04080        THE HINT, THE MESSAGE NUMBER (SECTION 6) OF THE                 ADS04090        QUESTION, AND THE MESSAGE NUMBER OF THE HINT.  THESE            ADS04100        VALUES ARE STASHED IN THE "HINTS" ARRAY.  HNTMAX IS             ADS04110        SET TO THE MAX HINT NUMBER (<= HNTSIZ).  NUMBERS 1-3            ADS04120        ARE UNUSABLE SINCE COND BITS ARE OTHERWISE ASSIGNED,            ADS04130        SO 2 IS USED TO REMEMBER IF HE'S READ THE CLUE IN THE           ADS04140        REPOSITORY, AND 3 IS USED TO REMEMBER WHETHER HE                ADS04150        ASKED FOR INSTRUCTIONS (GETS MORE TURNS, BUT LOSES              ADS04160        POINTS).                                                        ADS04170    SECTION 12:  MAGIC MESSAGES.  IDENTICAL TO SECTION 6                ADS04180        EXCEPT PUT IN A SEPARATE SECTION FOR EASIER                     ADS04190        REFERENCE.  MAGIC MESSAGES ARE USED BY THE STARTUP,             ADS04200        MAINTENANCE MODE, AND RELATED ROUTINES.                         ADS04210    SECTION 0:  END OF DATABASE.                                        ADS04220                                                                        ADS04230  */                                                                    ADS04240                                                                        ADS04250                                                                        ADS042601/*  READ THE DATABASE     */                                           ADS04270                                                                        ADS04280         PUT STRING (OUTSTR) EDIT ('Initializing...') (A);              ADS04290         CALL LINEOUT;                                                  ADS04300                                                                        ADS04310 /*                                                                     ADS04320    CLEAR OUT THE VARIOUS TEXT-POINTER ARRAYS.  ALL TEXT IS             ADS04330    STORED IN ARRAY LINES; EACH LINE IS PRECEDED BY A WORD              ADS04340    POINTING TO THE NEXT POINTER (I.E.  THE WORD FOLLOWING              ADS04350    THE END OF THE LINE).  THE POINTER IS NEGATIVE IF THIS IS           ADS04360    FIRST LINE OF A MESSAGE.  THE TEXT-POINTER ARRAYS CONTAIN           ADS04370    INDICES OF POINTER-WORDS IN LINES.  STEXT(N) IS SHORT               ADS04380    DESCRIPTION OF LOCATION N.  LTEXT(N) IS LONG DESCRIPTION.           ADS04390    PTEXT(N) POINTS TO MESSAGE FOR PROP(N)=0.  SUCCESSIVE               ADS04400    PROP MESSAGES ARE FOUND BY CHASING POINTERS.  RTEXT                 ADS04410    CONTAINS SECTION 6'S STUFF.  CTEXT(N) POINTS TO A                   ADS04420    PLAYER-CLASS MESSAGE.  MTEXT IS FOR SECTION 12.  WE ALSO            ADS04430    CLEAR COND.  SEE DESCRIPTION OF SECTION 9 FOR DETAILS.              ADS04440  */                                                                    ADS04450                                                                        ADS04460         DO I=1 TO 300;                                                 ADS04470             IF I <= 100 THEN PTEXT(I)=0;                               ADS04480             IF I <= RTXSIZ THEN RTEXT(I)=0;                            ADS04490             IF I <= CLSMAX THEN CTEXT(I)=0;                            ADS04500             IF I <= LOCSIZ THEN DO;                                    ADS04510                 STEXT(I)=0;                                            ADS04520                 LTEXT(I)=0;                                            ADS04530                 COND(I)=0;                                             ADS04540                 END;                                                   ADS04550             END;                                                       ADS04560                                                                        ADS04570         KEY=0;                                                         ADS04580         LINUSE=1;                                                      ADS04590         TRVS=1;                                                        ADS04600         CLSSES=1;                                                      ADS04610                                                                        ADS04620 /* START NEW DATA SECTION.  SECT IS THE SECTION NUMBER. */             ADS04630                                                                        ADS04640 L1002:  GET FILE (CAVES) EDIT (SECT) (COL(1),F(8));                    ADS04650         OLDLOC=-1;                                                     ADS04660         PUT STRING (OUTSTR) EDIT ('Reading section #',SECT)            ADS04670               (A,F(2));                                                ADS04680         CALL LINEOUT;                                                  ADS04690         SELECT (SECT);                                                 ADS04700            WHEN (00)  GO TO L1100;        /* (0) */                    ADS04710            WHEN (01)  GO TO L1004;        /* (1) */                    ADS04720            WHEN (02)  GO TO L1004;        /* (2) */                    ADS04730            WHEN (03)  GO TO L1030;        /* (3) */                    ADS04740            WHEN (04)  GO TO L1040;        /* (4) */                    ADS04750            WHEN (05)  GO TO L1004;        /* (5) */                    ADS04760            WHEN (06)  GO TO L1004;        /* (6) */                    ADS04770            WHEN (07)  GO TO L1050;        /* (7) */                    ADS04780            WHEN (08)  GO TO L1060;        /* (8) */                    ADS04790            WHEN (09)  GO TO L1070;        /* (9) */                    ADS04800            WHEN (10)  GO TO L1004;       /* (10) */                    ADS04810            WHEN (11)  GO TO L1080;       /* (11) */                    ADS04820            END;                                                        ADS04830         CALL BUG(9);                                                   ADS04840                                                                        ADS04850 /* SECTIONS 1, 2, 5, 6, 10.  READ MESSAGES AND SET UP POINTERS. */     ADS04860                                                                        ADS04870 L1004:  GET FILE (CAVES) EDIT                                          ADS04880             (LOC,(LINES(J) DO J=LINUSE+1 TO LINUSE+14),KKWORD)         ADS04890             (COL(1),F(8),14 A(5),A(2));                                ADS04900         IF KKWORD ^= ' ' THEN CALL BUG(0);                             ADS04910         IF LOC = -1 THEN GOTO L1002;                                   ADS04920         DO K=1 TO 14;                                                  ADS04930             KK=LINUSE+15-K;                                            ADS04940             IF LINES(KK) ^= ' ' THEN GOTO L1007;                       ADS04950             END;                                                       ADS04960         CALL BUG(1);                                                   ADS04970 L1007:  PICWORD=KK+1;                                                  ADS04980         LINES(LINUSE)=PICWORD;                                         ADS04990         IF LOC = OLDLOC THEN GOTO L1020;                               ADS05000         PICWORD=-LINES(LINUSE);                                        ADS05010         LINES(LINUSE)=PICWORD;                                         ADS05020         IF SECT = 10 THEN GOTO L1012;                                  ADS05030         IF SECT = 6 THEN GOTO L1011;                                   ADS05040         IF SECT = 5 THEN GOTO L1010;                                   ADS05050         IF SECT = 1 THEN GOTO L1008;                                   ADS05060                                                                        ADS05070         STEXT(LOC)=LINUSE;                                             ADS05080         GOTO L1020;                                                    ADS05090                                                                        ADS05100 L1008:  LTEXT(LOC)=LINUSE;                                             ADS05110         GOTO L1020;                                                    ADS05120                                                                        ADS05130 L1010:  IF LOC > 0 & LOC <= 100 THEN PTEXT(LOC)=LINUSE;                ADS05140         GOTO L1020;                                                    ADS05150                                                                        ADS05160 L1011:  IF LOC > RTXSIZ THEN CALL BUG(6);                              ADS05170         RTEXT(LOC)=LINUSE;                                             ADS05180         GOTO L1020;                                                    ADS05190                                                                        ADS05200 L1012:  CTEXT(CLSSES)=LINUSE;                                          ADS05210         CVAL(CLSSES)=LOC;                                              ADS05220         CLSSES=CLSSES+1;                                               ADS05230                                                                        ADS05240 L1020:  LINUSE=KK+1;                                                   ADS05250         LINES(LINUSE)='-1   ';                                         ADS05260         OLDLOC=LOC;                                                    ADS05270         IF LINUSE+14 > LINSIZ THEN CALL BUG(2);                        ADS05280         GOTO L1004;                                                    ADS05290                                                                        ADS053001/*                                                                     ADS05310    THE STUFF FOR SECTION 3 IS ENCODED HERE.  EACH                      ADS05320    "FROM-LOCATION" GETS A CONTIGUOUS SECTION OF THE "TRAVEL"           ADS05330    ARRAY.  EACH ENTRY IN TRAVEL IS NEWLOC*1000 + KEYWORD               ADS05340    (FROM SECTION 4, MOTION VERBS), AND IS NEGATED IF THIS IS           ADS05350    THE LAST ENTRY FOR THIS LOCATION.  KEY(N) IS THE INDEX IN           ADS05360    TRAVEL OF THE FIRST OPTION AT LOCATION N.                           ADS05370 */                                                                     ADS05380                                                                        ADS05390 L1030:  GET FILE (CAVES) EDIT                                          ADS05400              (LOC,NEWLOC,(TK(I) DO I=1 TO 8)) (COL(1),10 F(8));        ADS05410         IF LOC = -1 THEN GOTO L1002;                                   ADS05420         IF KEY(LOC) ^= 0 THEN GOTO L1033;                              ADS05430         KEY(LOC)=TRVS;                                                 ADS05440         GOTO L1035;                                                    ADS05450 L1033:  TRAVEL(TRVS-1)=-TRAVEL(TRVS-1);                                ADS05460 L1035:  DO L=1 TO 8;                                                   ADS05470             IF TK(L) = 0 THEN GOTO L1039;                              ADS05480             TRAVEL(TRVS)=NEWLOC*1000+TK(L);                            ADS05490             TRVS=TRVS+1;                                               ADS05500             IF TRVS = TRVSIZ THEN CALL BUG(3);                         ADS05510             END;                                                       ADS05520                                                                        ADS05530 L1039:  TRAVEL(TRVS-1)=-TRAVEL(TRVS-1);                                ADS05540         GOTO L1030;                                                    ADS05550                                                                        ADS05560 /*                                                                     ADS05570    HERE WE READ IN THE VOCABULARY.  KTAB(N) IS THE WORD                ADS05580    NUMBER, ATAB(N) IS THE CORRESPONDING WORD.  THE -1 AT THE           ADS05590    END OF SECTION 4 IS LEFT IN KTAB AS AN END-MARKER.  THE             ADS05600    WORDS ARE GIVEN A MINIMAL HASH TO MAKE READING THE                  ADS05610    CORE-IMAGE HARDER.  NOTE THAT '/7-08' HAD BETTER NOT BE             ADS05620    IN THE LIST, SINCE IT COULD HASH TO -1.  (HASHING REMOVED           ADS05630    IN PL/1 VERSION..BRD)                                               ADS05640 */                                                                     ADS05650                                                                        ADS05660 L1040:  DO TABNDX=1 TO TABSIZ;                                         ADS05670 L1043:  GET FILE (CAVES) EDIT                                          ADS05680               (KTAB(TABNDX),ATAB(TABNDX)) (COL(1),F(8),A (5));         ADS05690         IF KTAB(TABNDX) = -1 THEN GOTO L1002;                          ADS05700         END;                                                           ADS05710         CALL BUG(4);                                                   ADS05720                                                                        ADS05730 /*                                                                     ADS05740    READ IN THE INITIAL LOCATIONS FOR EACH OBJECT.  ALSO THE            ADS05750    IMMOVABILITY INFO.  PLAC CONTAINS INITIAL LOCATIONS OF              ADS05760    OBJECTS.  FIXD IS -1 FOR IMMOVABLE OBJECTS (INCLUDING THE           ADS05770    SNAKE), OR = SECOND LOC FOR TWO-PLACED OBJECTS.                     ADS05780 */                                                                     ADS05790                                                                        ADS05800 L1050:  GET FILE (CAVES) EDIT (OBJ,J,K) (COL(1),3 F(8));               ADS05810         IF OBJ = -1 THEN GOTO L1002;                                   ADS05820         PLAC(OBJ)=J;                                                   ADS05830         FIXD(OBJ)=K;                                                   ADS05840         GOTO L1050;                                                    ADS05850                                                                        ADS05860 /* READ DEFAULT MESSAGE NUMBERS FOR ACTION VERBS, STORE IN             ADS05870    ACTSPK.  */                                                         ADS05880                                                                        ADS05890 L1060:  GET FILE (CAVES) EDIT (VERB,J) (COL(1),2 F(8));                ADS05900         IF VERB = -1 THEN GOTO L1002;                                  ADS05910         ACTSPK(VERB)=J;                                                ADS05920         GOTO L1060;                                                    ADS05930                                                                        ADS05940 /* READ INFO ABOUT AVAILABLE LIQUIDS AND OTHER CONDITIONS,             ADS05950    STORE IN COND.  */                                                  ADS05960                                                                        ADS05970 L1070:  GET FILE (CAVES) EDIT (K,(TK(I) DO I=1 TO 9))                  ADS05980              (COL(1),10 F(8));                                         ADS05990         IF K = -1 THEN GOTO L1002;                                     ADS06000         DO I=1 TO 9;                                                   ADS06010             LOC=TK(I);                                                 ADS06020             IF LOC = 0 THEN GOTO L1070;                                ADS06030             IF BITSET(LOC,K) THEN CALL BUG(8);                         ADS06040             COND(LOC)=COND(LOC)+2**K;                                  ADS06050             END;                                                       ADS06060         GOTO L1070;                                                    ADS06070                                                                        ADS06080 /* READ DATA FOR HINTS. */                                             ADS06090                                                                        ADS06100 L1080:  HNTMAX=0;                                                      ADS06110 L1081:  GET FILE (CAVES) EDIT (K,(TK(I) DO I=1 TO 4))                  ADS06120              (COL(1),5 F(8));                                          ADS06130         IF K = -1 THEN GOTO L1002;                                     ADS06140         IF K = 0 THEN GOTO L1081;                                      ADS06150         IF K < 0 ! K > HNTSIZ THEN CALL BUG(7);                        ADS06160         DO I=1 TO 4;                                                   ADS06170             HINTS(K,I)=TK(I);                                          ADS06180             END;                                                       ADS06190         HNTMAX=MAX(HNTMAX,K);                                          ADS06200         GOTO L1081;                                                    ADS062101/*                                                                     ADS06220    FINISH CONSTRUCTING INTERNAL DATA FORMAT                            ADS06230                                                                        ADS06240    HAVING READ IN THE DATABASE, CERTAIN THINGS ARE NOW                 ADS06250    CONSTRUCTED.  PROPS ARE SET TO ZERO.  WE FINISH SETTING             ADS06260    UP COND BY CHECKING FOR FORCED-MOTION TRAVEL ENTRIES.               ADS06270    THE PLAC AND FIXD ARRAYS ARE USED TO SET UP ATLOC(N) AS             ADS06280    THE FIRST OBJECT AT LOCATION N, AND LINK(OBJ) AS THE NEXT           ADS06290    OBJECT AT THE SAME LOCATION AS OBJ.  (OBJ>100 INDICATES             ADS06300    THAT FIXED(OBJ-100)=LOC; LINK(OBJ) IS STILL THE CORRECT             ADS06310    LINK TO USE.) ABB IS ZEROED; IT CONTROLS WHETHER THE                ADS06320    ABBREVIATED DESCRIPTION IS PRINTED.  COUNTS MOD 5 UNLESS            ADS06330    "LOOK" IS USED.                                                     ADS06340 */                                                                     ADS06350                                                                        ADS06360 L1100:  DO I=1 TO 100;                                                 ADS06370             PLACE(I)=0;                                                ADS06380             PROP(I)=0;                                                 ADS06390             LINK(I)=0;                                                 ADS06400             LINK(I+100)=0;                                             ADS06410             END;                                                       ADS06420                                                                        ADS06430         DO I=1 TO LOCSIZ;                                              ADS06440         ABB(I)=0;                                                      ADS06450         IF LTEXT(I) = 0 ! KEY(I) = 0 THEN GOTO L1102;                  ADS06460         K=KEY(I);                                                      ADS06470         IF MOD(ABS(TRAVEL(K)),1000) = 1 THEN COND(I)=2;                ADS06480 L1102:  ATLOC(I)=0;                                                    ADS06490         END;                                                           ADS06500                                                                        ADS06510 /*                                                                     ADS06520    SET UP THE ATLOC AND LINK ARRAYS AS DESCRIBED ABOVE.                ADS06530    WE'LL USE THE DROP SUBROUTINE, WHICH PREFACES NEW OBJECTS           ADS06540    ON THE LISTS.  SINCE WE WANT THINGS IN THE OTHER ORDER,             ADS06550    WE'LL RUN THE LOOP BACKWARDS.  IF THE OBJECT IS IN TWO              ADS06560    LOCS, WE DROP IT TWICE.  THIS ALSO SETS UP "PLACE" AND              ADS06570    "FIXED" AS COPIES OF "PLAC" AND "FIXD".  ALSO, SINCE                ADS06580    TWO-PLACED OBJECTS ARE TYPICALLY BEST DESCRIBED LAST,               ADS06590    WE'LL DROP THEM FIRST.                                              ADS06600 */                                                                     ADS06610                                                                        ADS06620         DO I=1 TO 100;                                                 ADS06630             K=101-I;                                                   ADS06640             IF FIXD(K) > 0 THEN DO;                                    ADS06650                 CALL DROP(K+100,FIXD(K));                              ADS06660                 CALL DROP(K,PLAC(K));                                  ADS06670                 END;                                                   ADS06680             END;                                                       ADS06690                                                                        ADS06700         DO I=1 TO 100;                                                 ADS06710             K=101-I;                                                   ADS06720             FIXED(K)=FIXD(K);                                          ADS06730             IF PLAC(K) ^= 0 & FIXD(K) <= 0 THEN CALL DROP(K,PLAC(K));  ADS06740             END;                                                       ADS06750                                                                        ADS06760 /*                                                                     ADS06770    TREASURES, AS NOTED EARLIER, ARE OBJECTS 50 THROUGH                 ADS06780    MAXTRS (CURRENTLY 79).  THEIR PROPS ARE INITIALLY -1, AND           ADS06790    ARE SET TO 0 THE FIRST TIME THEY ARE DESCRIBED.  TALLY              ADS06800    KEEPS TRACK OF HOW MANY ARE NOT YET FOUND, SO WE KNOW               ADS06810    WHEN TO CLOSE THE CAVE.  TALLY2 COUNTS HOW MANY CAN NEVER           ADS06820    BE FOUND (E.G.  IF LOST BIRD OR BRIDGE).                            ADS06830 */                                                                     ADS06840                                                                        ADS06850         MAXTRS=79;                                                     ADS06860         TALLY=0;                                                       ADS06870         TALLY2=0;                                                      ADS06880         DO I=50 TO MAXTRS;                                             ADS06890             IF PTEXT(I) ^= 0 THEN PROP(I)=-1;                          ADS06900             TALLY=TALLY-PROP(I);                                       ADS06910             END;                                                       ADS06920 /*                                                                     ADS06930    CLEAR THE HINT STUFF.  HINTLC(I) IS HOW LONG HE'S BEEN AT           ADS06940    LOC WITH COND BIT I.  HINTED(I) IS TRUE IFF HINT I HAS              ADS06950    BEEN USED.                                                          ADS06960 */                                                                     ADS06970                                                                        ADS06980         DO  I=1 TO HNTMAX;                                             ADS06990             HINTED(I)='0'B;                                            ADS07000             HINTLC(I)=0;                                               ADS07010             END;                                                       ADS07020                                                                        ADS07030 /* DEFINE SOME HANDY MNEMONICS.  THESE CORRESPOND TO OBJECT            ADS07040    NUMBERS.  */                                                        ADS07050                                                                        ADS07060         KEYS=VOCAB('KEYS',1);                                          ADS07070         LAMP=VOCAB('LAMP',1);                                          ADS07080         GRATE=VOCAB('GRATE',1);                                        ADS07090         CAGE=VOCAB('CAGE',1);                                          ADS07100         ROD=VOCAB('ROD',1);                                            ADS07110         ROD2=ROD+1;                                                    ADS07120         STEPS=VOCAB('STEPS',1);                                        ADS07130         BIRD=VOCAB('BIRD',1);                                          ADS07140         DOOR=VOCAB('DOOR',1);                                          ADS07150         PILLOW=VOCAB('PILLO',1);                                       ADS07160         SNAKE=VOCAB('SNAKE',1);                                        ADS07170         FISSUR=VOCAB('FISSU',1);                                       ADS07180         TABLET=VOCAB('TABLE',1);                                       ADS07190         CLAM=VOCAB('CLAM',1);                                          ADS07200         OYSTER=VOCAB('OYSTE',1);                                       ADS07210         MAGZIN=VOCAB('MAGAZ',1);                                       ADS07220         DWARF=VOCAB('DWARF',1);                                        ADS07230         KNIFE=VOCAB('KNIFE',1);                                        ADS07240         FOOD=VOCAB('FOOD',1);                                          ADS07250         BOTTLE=VOCAB('BOTTL',1);                                       ADS07260         WATER=VOCAB('WATER',1);                                        ADS07270         OIL=VOCAB('OIL',1);                                            ADS07280         PLANT=VOCAB('PLANT',1);                                        ADS07290         PLANT2=PLANT+1;                                                ADS07300         AXE=VOCAB('AXE',1);                                            ADS07310         MIRROR=VOCAB('MIRRO',1);                                       ADS07320         DRAGON=VOCAB('DRAGO',1);                                       ADS07330         CHASM=VOCAB('CHASM',1);                                        ADS07340         TROLL=VOCAB('TROLL',1);                                        ADS07350         TROLL2=TROLL+1;                                                ADS07360         BEAR=VOCAB('BEAR',1);                                          ADS07370         MESSAG=VOCAB('MESSA',1);                                       ADS07380         VEND=VOCAB('VENDI',1);                                         ADS07390         BATTER=VOCAB('BATTE',1);                                       ADS07400                                                                        ADS07410 /* OBJECTS FROM 50 THROUGH WHATEVER ARE TREASURES.  HERE ARE           ADS07420    A FEW.  */                                                          ADS07430                                                                        ADS07440         NUGGET=VOCAB('GOLD',1);                                        ADS07450         COINS=VOCAB('COINS',1);                                        ADS07460         CHEST=VOCAB('CHEST',1);                                        ADS07470         EGGS=VOCAB('EGGS',1);                                          ADS07480         TRIDNT=VOCAB('TRIDE',1);                                       ADS07490         VASE=VOCAB('VASE',1);                                          ADS07500         EMRALD=VOCAB('EMERA',1);                                       ADS07510         PYRAM=VOCAB('PYRAM',1);                                        ADS07520         PEARL=VOCAB('PEARL',1);                                        ADS07530         RUG=VOCAB('RUG',1);                                            ADS07540         CHAIN=VOCAB('CHAIN',1);                                        ADS07550                                                                        ADS07560 /* THESE ARE MOTION-VERB NUMBERS. */                                   ADS07570                                                                        ADS07580         BACK=VOCAB('BACK',0);                                          ADS07590         LOOK=VOCAB('LOOK',0);                                          ADS07600         CAVE=VOCAB('CAVE',0);                                          ADS07610         NULLX=VOCAB('NULL',0);                                         ADS07620         ENTRNC=VOCAB('ENTRA',0);                                       ADS07630         DPRSSN=VOCAB('DEPRE',0);                                       ADS07640                                                                        ADS07650 /* AND SOME ACTION VERBS. */                                           ADS07660                                                                        ADS07670         SAY=VOCAB('SAY',2);                                            ADS07680         LOCK=VOCAB('LOCK',2);                                          ADS07690         THROW=VOCAB('THROW',2);                                        ADS07700         FIND=VOCAB('FIND',2);                                          ADS07710         INVENT=VOCAB('INVEN',2);                                       ADS07720                                                                        ADS07730 /*                                                                     ADS07740    INITIALIZE THE DWARVES.  DLOC IS LOC OF DWARVES,                    ADS07750    HARD-WIRED IN.  ODLOC IS PRIOR LOC OF EACH DWARF,                   ADS07760    INITIALLY GARBAGE.  DALTLC IS ALTERNATE INITIAL LOC FOR             ADS07770    DWARF, IN CASE ONE OF THEM STARTS OUT ON TOP OF THE                 ADS07780    ADVENTURER.  (NO 2 OF THE 5 INITIAL LOCS ARE ADJACENT.)             ADS07790    DSEEN IS TRUE IF DWARF HAS SEEN HIM.  DFLAG CONTROLS THE            ADS07800    LEVEL OF ACTIVATION OF ALL THIS:                                    ADS07810         0       NO DWARF STUFF YET (WAIT UNTIL REACHES HALL            ADS07820                 OF MISTS)                                              ADS07830         1       REACHED HALL OF MISTS, BUT HASN'T MET FIRST DWARF      ADS07840         2       MET FIRST DWARF, OTHERS START MOVING, NO               ADS07850                 KNIVES THROWN YET                                      ADS07860         3       A KNIFE HAS BEEN THROWN (FIRST SET ALWAYS              ADS07870                 MISSES)                                                ADS07880         3+      DWARVES ARE MAD (INCREASES THEIR ACCURACY)             ADS07890    SIXTH DWARF IS SPECIAL (THE PIRATE).  HE ALWAYS STARTS AT           ADS07900    HIS CHEST'S EVENTUAL LOCATION INSIDE THE MAZE.  THIS LOC            ADS07910    IS SAVED IN CHLOC FOR REF.  THE DEAD END IN THE OTHER               ADS07920    MAZE HAS ITS LOC STORED IN CHLOC2.                                  ADS07930 */                                                                     ADS07940                                                                        ADS07950         CHLOC=114;                                                     ADS07960         CHLOC2=140;                                                    ADS07970         DO I=1 TO 6;                                                   ADS07980             DSEEN(I)='0'B;                                             ADS07990             END;                                                       ADS08000         DFLAG=0;                                                       ADS08010         DLOC(1)=19;                                                    ADS08020         DLOC(2)=27;                                                    ADS08030         DLOC(3)=33;                                                    ADS08040         DLOC(4)=44;                                                    ADS08050         DLOC(5)=64;                                                    ADS08060         DLOC(6)=CHLOC;                                                 ADS08070         DALTLC=18;                                                     ADS08080                                                                        ADS080901/*                                                                     ADS08100    OTHER RANDOM FLAGS AND COUNTERS, AS FOLLOWS:                        ADS08110         TURNS   TALLIES HOW MANY COMMANDS HE'S GIVEN                   ADS08120                 (IGNORES YES/NO)                                       ADS08130         LIMIT   LIFETIME OF LAMP (NOT SET HERE)                        ADS08140         IWEST   HOW MANY TIMES HE'S SAID "WEST" INSTEAD OF             ADS08150                 "W"                                                    ADS08160         KNFLOC  0 IF NO KNIFE HERE, LOC IF KNIFE HERE, -1              ADS08170                 AFTER CAVEAT                                           ADS08180         DETAIL  HOW OFTEN WE'VE SAID "NOT ALLOWED TO GIVE              ADS08190                 MORE DETAIL"                                           ADS08200         ABBNUM  HOW OFTEN WE SHOULD PRINT NON-ABBREVIATED              ADS08210                 DESCRIPTIONS                                           ADS08220         MAXDIE  NUMBER OF REINCARNATION MESSAGES AVAILABLE             ADS08230                 (UP TO 5)                                              ADS08240         NUMDIE  NUMBER OF TIMES KILLED SO FAR                          ADS08250         HOLDNG  NUMBER OF OBJECTS BEING CARRIED                        ADS08260         DKILL   NUMBER OF DWARVES KILLED (UNUSED IN SCORING,           ADS08270                 NEEDED FOR MSG)                                        ADS08280         FOOBAR  CURRENT PROGRESS IN SAYING "FEE FIE FOE                ADS08290                 FOO".                                                  ADS08300         BONUS   USED TO DETERMINE AMOUNT OF BONUS IF HE                ADS08310                 REACHES CLOSING                                        ADS08320         CLOCK1  NUMBER OF TURNS FROM FINDING LAST TREASURE             ADS08330                 TILL CLOSING                                           ADS08340         CLOCK2  NUMBER OF TURNS FROM FIRST WARNING TILL                ADS08350                 BLINDING FLASH                                         ADS08360         LOGICALS WERE EXPLAINED EARLIER                                ADS08370 */                                                                     ADS08380                                                                        ADS08390         TURNS=0;                                                       ADS08400         LMWARN='0'B;                                                   ADS08410         IWEST=0;                                                       ADS08420         KNFLOC=0;                                                      ADS08430         DETAIL=0;                                                      ADS08440         ABBNUM=5;                                                      ADS08450         DO I=0 TO 4;                                                   ADS08460             IF RTEXT(2*I+81) ^= 0 THEN MAXDIE=I+1;                     ADS08470             END;                                                       ADS08480         NUMDIE=0;                                                      ADS08490         HOLDNG=0;                                                      ADS08500         DKILL=0;                                                       ADS08510         FOOBAR=0;                                                      ADS08520         BONUS=0;                                                       ADS08530         CLOCK1=30;                                                     ADS08540         CLOCK2=50;                                                     ADS08550         CLOSNG='0'B;                                                   ADS08560         PANIC='0'B;                                                    ADS08570         CLOSED='0'B;                                                   ADS08580         GAVEUP='0'B;                                                   ADS08590         SCORNG='0'B;                                                   ADS08600                                                                        ADS086101/* REPORT ON AMOUNT OF ARRAYS ACTUALLY USED, TO PERMIT                 ADS08620    REDUCTIONS. */                                                      ADS08630                                                                        ADS08640                                                                        ADS08650         DO K=1 TO LOCSIZ;                                              ADS08660             KK=LOCSIZ+1-K;                                             ADS08670             IF LTEXT(KK) ^= 0 THEN GOTO L1997;                         ADS08680             END;                                                       ADS08690                                                                        ADS08700         OBJ=0;                                                         ADS08710 L1997:  DO K=1 TO 100;                                                 ADS08720             IF PTEXT(K) ^= 0 THEN OBJ=OBJ+1;                           ADS08730             END;                                                       ADS08740                                                                        ADS08750         DO K=1 TO TABNDX;                                              ADS08760             IF KTAB(K)/1000 = 2 THEN VERB=KTAB(K)-2000;                ADS08770             END;                                                       ADS08780                                                                        ADS08790         DO K=1 TO RTXSIZ;                                              ADS08800             J=RTXSIZ+1-K;                                              ADS08810             IF RTEXT(J) ^= 0 THEN GOTO L1991;                          ADS08820             END;                                                       ADS08830                                                                        ADS08840 L1991:  K=100;                                                         ADS08850         CALL LINESKP;                                                  ADS08860         PUT STRING (OUTSTR) EDIT (LINUSE,' of ',LINSIZ,                ADS08870             ' words of messages') (F(6),A,F(6),A);                     ADS08880         CALL LINEOUT;                                                  ADS08890         PUT STRING (OUTSTR) EDIT (TRVS,' of ',TRVSIZ,                  ADS08900             ' travel options') (F(6),A,F(6),A);                        ADS08910         CALL LINEOUT;                                                  ADS08920         PUT STRING (OUTSTR) EDIT (TABNDX,' of ',TABSIZ,                ADS08930             ' vocabulary words') (F(6),A,F(6),A);                      ADS08940         CALL LINEOUT;                                                  ADS08950         PUT STRING (OUTSTR) EDIT (KK,' of ',LOCSIZ,                    ADS08960             ' locations') (F(6),A,F(6),A);                             ADS08970         CALL LINEOUT;                                                  ADS08980         PUT STRING (OUTSTR) EDIT (OBJ,' of ',K,                        ADS08990             ' objects') (F(6),A,F(6),A);                               ADS09000         CALL LINEOUT;                                                  ADS09010         PUT STRING (OUTSTR) EDIT (VERB,' of ',VRBSIZ,                  ADS09020             ' action verbs') (F(6),A,F(6),A);                          ADS09030         CALL LINEOUT;                                                  ADS09040         PUT STRING (OUTSTR) EDIT (J,' of ',RTXSIZ,                     ADS09050             ' rtext messages') (F(6),A,F(6),A);                        ADS09060         CALL LINEOUT;                                                  ADS09070         PUT STRING (OUTSTR) EDIT (CLSSES,' of ',CLSSIZ,                ADS09080             ' class messages') (F(6),A,F(6),A);                        ADS09090         CALL LINEOUT;                                                  ADS09100         PUT STRING (OUTSTR) EDIT (HNTMAX,' of ',HNTSIZ,                ADS09110             ' hints') (F(6),A,F(6),A);                                 ADS09120         CALL LINEOUT;                                                  ADS09130         CALL LINESKP;                                                  ADS09140                                                                        ADS09150                                                                        ADS09160  /* OK, LET'S WRITE THE CONTENTS OF THESE ARRAYS INTO ... */           ADS09170                                                                        ADS09180     CALL SAVEFL('ADVENTUR','SAVEFILE','A ',                            ADS09190            TXTCOM.RTEXT(1), 49070,                                     ADS09200            BLKCOM.BLKLIN, 4 ,                                          ADS09210            PTXCOM.PTEXT(1), 400,                                       ADS09220            VOCCOM.KTAB(1), 3900,                                       ADS09230            PLACOM.ATLOC(1), 2204,                                      ADS09240            ABBCOM.ABB(1), 600,                                         ADS09250            PICWORD,16,                                                 ADS09260            ADVARS.ABBNUM, 8207,                                        ADS09270                 IRC ) ;                                                ADS09280                                                                        ADS09290   SELECT ;                                                             ADS09300    WHEN(IRC=0)  PUT STRING (OUTSTR) EDIT                               ADS09310  ('Colossal cave adventure database written to ADVENTUR SAVEFILE A.')  ADS09320    (A);                                                                ADS09330    WHEN(IRC=1)  PUT STRING (OUTSTR) EDIT                               ADS09340     ('An ADVENTUR SAVEFILE A exists already; cannot overwrite.')       ADS09350            (A) ;                                                       ADS09360    WHEN( (IRC > 1) & (IRC < 28) ) PUT STRING (OUTSTR) EDIT             ADS09370  ('Unable to write ADVENTUR SAVEFILE A; return code from FSWRITE:',    ADS09380     IRC )  ( A, F(8) ) ;                                               ADS09390    OTHERWISE PUT STRING (OUTSTR) EDIT                                  ADS09400  ('Unable to write ADVENTUR SAVEFILE A; unrecognised return code:',    ADS09410     IRC )  ( A, F(8) ) ;                                               ADS09420    END ;                                                               ADS09430         CALL LINEOUT;                                                  ADS09440         CALL LINESKP;                                                  ADS09450         CALL LINESKP;                                                  ADS09460                                                                        ADS094701/*  SUBROUTINES/FUNCTIONS                                              ADS09480                                                                        ADS09490                                                                        ADS09500    TOTING(OBJ)  = TRUE IF THE OBJ IS BEING CARRIED                     ADS09510    HERE(OBJ)    = TRUE IF THE OBJ IS AT "LOC" (OR IS BEING CARRIED)    ADS09520    AT(OBJ)      = TRUE IF ON EITHER SIDE OF TWO-PLACED OBJECT          ADS09530    LIQ(DUMMY)   = OBJECT NUMBER OF LIQUID IN BOTTLE                    ADS09540    LIQLOC(LOC)  = OBJECT NUMBER OF LIQUID (IF ANY) AT LOC              ADS09550    BITSET(L,N)  = TRUE IF COND(L) HAS BIT N SET (BIT 0 IS UNITS BIT)   ADS09560    FORCED(LOC)  = TRUE IF LOC MOVES WITHOUT ASKING FOR INPUT (COND=2)  ADS09570    DARK(DUMMY)  = TRUE IF LOCATION "LOC" IS DARK                       ADS09580    PCT(N)       = TRUE N% OF THE TIME (N INTEGER FROM 0 TO 100)        ADS09590                                                                        ADS09600 */                                                                     ADS09610                                                                        ADS09620 TOTING: PROC (OBJ) RETURNS (BIT(1));                                   ADS09630                                                                        ADS09640         DCL OBJ FIXED BIN(31);                                         ADS09650                                                                        ADS09660         RETURN(PLACE(OBJ) = -1);                                       ADS09670         END;                                                           ADS09680                                                                        ADS09690 HERE: PROC (OBJ) RETURNS (BIT(1));                                     ADS09700                                                                        ADS09710         DCL OBJ FIXED BIN(31);                                         ADS09720                                                                        ADS09730         RETURN(PLACE(OBJ) = LOC ! TOTING(OBJ));                        ADS09740         END;                                                           ADS09750                                                                        ADS09760 AT: PROC (OBJ) RETURNS (BIT(1));                                       ADS09770                                                                        ADS09780         DCL OBJ FIXED BIN (31);                                        ADS09790                                                                        ADS09800         RETURN(PLACE(OBJ) = LOC ! FIXED (OBJ) = LOC);                  ADS09810         END;                                                           ADS09820                                                                        ADS09830 LIQ2: PROC (PBOTL) RETURNS (FIXED BIN(31));                            ADS09840                                                                        ADS09850         DCL PBOTL FIXED BIN(31);                                       ADS09860         DCL LIQ2TEMP FIXED BIN(31);                                    ADS09870                                                                        ADS09880         LIQ2TEMP=PBOTL/2;                                              ADS09890         RETURN((1-PBOTL)*WATER+(LIQ2TEMP)*(WATER+OIL));                ADS09900         END;                                                           ADS09910                                                                        ADS09920 LIQ: PROC (DUMMY) RETURNS (FIXED BIN(31));                             ADS09930                                                                        ADS09940         DCL DUMMY FIXED BIN(31);                                       ADS09950                                                                        ADS09960         RETURN(LIQ2(MAX(PROP(BOTTLE),-1-PROP(BOTTLE))));               ADS09970         END;                                                           ADS09980                                                                        ADS09990 LIQLOC: PROC (LOC) RETURNS (FIXED BIN(31));                            ADS10000                                                                        ADS10010         DCL LOC FIXED BIN(31);                                         ADS10020         DCL (LIQTEMP1,LIQTEMP2) FIXED BIN(31);                         ADS10030                                                                        ADS10040         LIQTEMP1=COND(LOC)/2;                                          ADS10050         LIQTEMP1=LIQTEMP1*2;                                           ADS10060         LIQTEMP2=COND(LOC)/4;                                          ADS10070         RETURN(LIQ2((MOD(LIQTEMP1,8)-5)*MOD(LIQTEMP2,2)+1));           ADS10080         END;                                                           ADS10090                                                                        ADS10100 BITSET: PROC (L,N) RETURNS (BIT(1));                                   ADS10110                                                                        ADS10120         DCL (L,N) FIXED BIN(31);                                       ADS10130         DCL BITTEMP FIXED BIN(31) STATIC;                              ADS10140                                                                        ADS10150         BITTEMP=COND(L)/2**N;                                          ADS10160         RETURN(MOD(BITTEMP,2) ^= 0);                                   ADS10170         END;                                                           ADS10180                                                                        ADS10190 FORCED: PROC (LOC) RETURNS (BIT(1));                                   ADS10200                                                                        ADS10210         DCL LOC FIXED BIN(31);                                         ADS10220                                                                        ADS10230         RETURN(COND(LOC) = 2);                                         ADS10240         END;                                                           ADS10250                                                                        ADS10260 DARK: PROC (DUMMY) RETURNS (BIT(1));                                   ADS10270                                                                        ADS10280         DCL DUMMY FIXED BIN(31);                                       ADS10290                                                                        ADS10300         RETURN(MOD(COND(LOC),2) = 0 &                                  ADS10310              (PROP(LAMP) = 0 ! ^ HERE(LAMP)));                         ADS10320         END;                                                           ADS10330                                                                        ADS10340 PCT: PROC (N) RETURNS (BIT(1));                                        ADS10350                                                                        ADS10360         DCL N FIXED BIN(31);                                           ADS10370                                                                        ADS10380         RETURN(RAN(100) < N);                                          ADS10390         END;                                                           ADS104001/* I/O ROUTINES (SPEAK, PSPEAK, RSPEAK, GETIN, YES, A5TOA1) */         ADS10410                                                                        ADS10420                                                                        ADS10430 SPEAK: PROC (N);                                                       ADS10440                                                                        ADS10450         DCL N FIXED BIN(31);                                           ADS10460         DCL (I,K,L) FIXED BIN (31);                                    ADS10470                                                                        ADS10480 /*                                                                     ADS10490    PRINT THE MESSAGE WHICH STARTS AT LINES(N).  PRECEDE IT             ADS10500    WITH A BLANK LINE UNLESS BLKLIN IS FALSE.                           ADS10510 */                                                                     ADS10520                                                                        ADS10530         IF N = 0 THEN RETURN;                                          ADS10540         IF LINES(N+1) = '>$<' THEN RETURN;                             ADS10550         IF (BLKLIN) THEN CALL LINESKP;                                 ADS10560         K=N;                                                           ADS10570 L1:     L=ABS(LINES(K))-1;                                             ADS10580         K=K+1;                                                         ADS10590         PUT STRING (OUTSTR) EDIT ((LINES(I) DO I=K TO L)) (14 A(5));   ADS10600         CALL LINEOUT;                                                  ADS10610         K=L+1;                                                         ADS10620         IF LINES(K) >= 0 THEN GOTO L1;                                 ADS10630         RETURN;                                                        ADS10640         END;                                                           ADS10650                                                                        ADS10660                                                                        ADS10670                                                                        ADS10680 PSPEAK:PROC (MSG,SKIP);                                                ADS10690                                                                        ADS10700         DCL (MSG,SKIP) FIXED BIN(31);                                  ADS10710         DCL (I,M) FIXED BIN (31);                                      ADS10720                                                                        ADS10730 /*                                                                     ADS10740    FIND THE SKIP+1ST MESSAGE FROM MSG AND PRINT IT.  MSG               ADS10750    SHOULD BE THE INDEX OF THE INVENTORY MESSAGE FOR OBJECT.            ADS10760    (INVEN+N+1 MESSAGE IS PROP=N MESSAGE).                              ADS10770 */                                                                     ADS10780                                                                        ADS10790         M=PTEXT(MSG);                                                  ADS10800         IF SKIP < 0 THEN GOTO L9;                                      ADS10810         DO I=0 TO SKIP;                                                ADS10820 L1:         M=ABS(LINES(M));                                           ADS10830             IF LINES(M) >= 0 THEN GOTO L1;                             ADS10840             END;                                                       ADS10850 L9:     CALL SPEAK(M);                                                 ADS10860         RETURN;                                                        ADS10870         END;                                                           ADS10880                                                                        ADS10890                                                                        ADS10900                                                                        ADS10910 RSPEAK: PROC (I);                                                      ADS10920                                                                        ADS10930         DCL I FIXED BIN(31);                                           ADS10940                                                                        ADS10950 /* PRINT THE I-TH "RANDOM" MESSAGE (SECTION 6 OF DATABASE). */         ADS10960                                                                        ADS10970         IF I ^= 0 THEN CALL SPEAK(RTEXT(I));                           ADS10980         RETURN;                                                        ADS10990         END;                                                           ADS11000                                                                        ADS11010 GETIN: PROC (WORD1,WORD1X,WORD2,WORD2X);                               ADS11020                                                                        ADS11030 /*                                                                     ADS11040    GET A COMMAND FROM THE ADVENTURER.  SNARF OUT THE FIRST             ADS11050    WORD, PAD IT WITH BLANKS, AND RETURN IT IN WORD1.  CHARS            ADS11060    6 THRU 10 ARE RETURNED IN WORD1X, IN CASE WE NEED TO                ADS11070    PRINT OUT THE WHOLE WORD IN AN ERROR MESSAGE.  ANY NUMBER           ADS11080    OF BLANKS MAY FOLLOW THE WORD.  IF A SECOND WORD APPEARS,           ADS11090    IT IS RETURNED IN WORD2 (CHARS 6 THRU 10 IN WORD2X), ELSE           ADS11100    WORD2 IS SET TO ZERO.                                               ADS11110 */                                                                     ADS11120                                                                        ADS11130         DCL (WORD1,WORD1X,WORD2,WORD2X) CHAR(5);                       ADS11140                                                                        ADS11150         WORD1,WORD1X,WORD2,WORD2X='     ';                             ADS11160         IF LOGON THEN PUT SKIP;                                        ADS11170         WORDSTRT=0;                                                    ADS11180         DO WHILE (WORDSTRT = 0);                                       ADS11190             IF BLKLIN THEN CALL LINESKP;                               ADS11200             CALL TREAD(INSTR,0,INSTR,INLEN,CCODE);                     ADS11210             IF CCODE = 1 THEN DO;                                      ADS11220                 OUTSTR=SUBSTR(INSTR,1,INLEN);                          ADS11230                 WORDSTRT=VERIFY(OUTSTR,' ');                           ADS11240                 END;                                                   ADS11250             ELSE DO;                                                   ADS11260                 IF BLKLIN THEN CALL LINESKP;                           ADS11270                 PUT STRING (OUTSTR) EDIT                               ADS11280                    ('Terminal error..reenter.') (A);                   ADS11290                 CALL LINEOUT;                                          ADS11300                 END;                                                   ADS11310             END;                                                       ADS11320         IF LOGON THEN PUT SKIP EDIT (OUTSTR) (A);                      ADS11330         OUTSTR=SUBSTR(OUTSTR,WORDSTRT);                                ADS11340         WORDEND=INDEX(OUTSTR,' ')-1;                                   ADS11350         IF WORDEND=-1 THEN WORDEND=LENGTH(OUTSTR);                     ADS11360         WORDSIZE=MIN(WORDEND,5);                                       ADS11370         WORD1=SUBSTR(OUTSTR,1,WORDSIZE);                               ADS11380         IF WORDEND > 5 THEN DO;                                        ADS11390             WORDSIZE=MIN(WORDEND-5,5);                                 ADS11400             WORD1X=SUBSTR(OUTSTR,6,WORDSIZE);                          ADS11410             END;                                                       ADS11420         IF WORDEND=LENGTH(OUTSTR) THEN RETURN;                         ADS11430         OUTSTR=SUBSTR(OUTSTR,WORDEND+1);                               ADS11440         WORDSTRT=VERIFY(OUTSTR,' ');                                   ADS11450         IF WORDSTRT = 0 THEN RETURN;                                   ADS11460         OUTSTR=SUBSTR(OUTSTR,WORDSTRT);                                ADS11470         WORDEND=INDEX(OUTSTR,' ')-1;                                   ADS11480         IF WORDEND = -1 THEN WORDEND=LENGTH(OUTSTR);                   ADS11490         WORDSIZE=MIN(WORDEND,5);                                       ADS11500         WORD2=SUBSTR(OUTSTR,1,WORDSIZE);                               ADS11510         IF WORDEND > 5 THEN DO;                                        ADS11520             WORDSIZE=MIN(WORDEND-5,5);                                 ADS11530             WORD2X=SUBSTR(OUTSTR,6,WORDSIZE);                          ADS11540             END;                                                       ADS11550         RETURN;                                                        ADS11560         END;                                                           ADS11570                                                                        ADS11580                                                                        ADS11590                                                                        ADS11600 YES: PROC (X,Y,Z) RETURNS (BIT(1));                                    ADS11610                                                                        ADS11620         DCL (X,Y,Z) FIXED BIN(31);                                     ADS11630                                                                        ADS11640 /*                                                                     ADS11650    PRINT MESSAGE X, WAIT FOR YES/NO ANSWER.  IF YES, PRINT Y           ADS11660    AND LEAVE YEA TRUE; IF NO, PRINT Z AND LEAVE YEA FALSE.             ADS11670 */                                                                     ADS11680                                                                        ADS11690                                                                        ADS11700 L1:     IF X ^= 0 THEN CALL RSPEAK(X);                                 ADS11710         CALL GETIN(REPLY,JUNK1,JUNK2,JUNK3);                           ADS11720         IF REPLY = 'YES' ! REPLY = 'Y' THEN GOTO L10;                  ADS11730         IF REPLY = 'NO' ! REPLY = 'N' THEN GOTO L20;                   ADS11740         CALL LINESKP;                                                  ADS11750         PUT STRING (OUTSTR) EDIT ('Please answer the question]') (A);  ADS11760         CALL LINEOUT;                                                  ADS11770         GOTO L1;                                                       ADS11780 L10:    IF Y ^= 0 THEN CALL RSPEAK(Y);                                 ADS11790         RETURN('1'B);                                                  ADS11800 L20:    IF Z ^=0 THEN CALL RSPEAK(Z);                                  ADS11810         RETURN('0'B);                                                  ADS11820         END;                                                           ADS11830                                                                        ADS11840                                                                        ADS11850                                                                        ADS11860 A5TOA1: PROC (A,B,CHARS,LENG);                                         ADS11870                                                                        ADS11880 /*                                                                     ADS11890   A AND B CONTAN A 1-10 CHARACTER WORD IN A5 FORMAT.                   ADS11900   THEY ARE CONCATENATED AND MOVED INTO A CHAR(1)                       ADS11910   ARRAY UNTIL A BLANK IS ENCOUNTERED.  THE TOTAL                       ADS11920   LENGTH IS RETURNED IN LENG.                                          ADS11930                                                                        ADS11940 */                                                                     ADS11950                                                                        ADS11960         DCL (A,B) CHAR(5);                                             ADS11970         DCL LENG FIXED BIN(31);                                        ADS11980         DCL CHARS(10) CHAR(1);                                         ADS11990                                                                        ADS12000         DCL WORDS(2) CHAR(5);                                          ADS12010         DCL XLATETO CHAR(26) INIT ('abcdefghijklmnopqrstuvwxyz');      ADS12020         DCL XLATEFR CHAR(26) INIT ('ABCDEFGHIJKLMNOPQRSTUVWXYZ');      ADS12030                                                                        ADS12040         WORDS(1)=TRANSLATE(A,XLATETO,XLATEFR);                         ADS12050         WORDS(2)=TRANSLATE(B,XLATETO,XLATEFR);                         ADS12060         LENG=0;                                                        ADS12070         DO WORD=1 TO 2;                                                ADS12080             DO CH=1 TO 5;                                              ADS12090                 CHARS(LENG+1)=SUBSTR(WORDS(WORD),CH,1);                ADS12100                 IF CHARS(LENG+1) = ' ' THEN RETURN;                    ADS12110                 LENG=LENG+1;                                           ADS12120                 END;                                                   ADS12130             END;                                                       ADS12140         RETURN;                                                        ADS12150         END;                                                           ADS121601/*                                                                     ADS12170    DATA STRUCTURE ROUTINES (VOCAB, DSTROY, JUGGLE, MOVE,               ADS12180    PUT, CARRY, DROP)                                                   ADS12190 */                                                                     ADS12200                                                                        ADS12210 VOCAB: PROC (ID,INIT) RETURNS(FIXED BIN(31));                          ADS12220                                                                        ADS12230         DCL ID CHAR(5);                                                ADS12240         DCL INIT FIXED BIN(31);                                        ADS12250         DCL I    FIXED BIN(31);                                        ADS12260                                                                        ADS12270 /*                                                                     ADS12280    LOOK UP ID IN THE VOCABULARY (ATAB) AND RETURN ITS                  ADS12290    "DEFINITION" (KTAB), OR -1 IF NOT FOUND.  IF INIT IS                ADS12300    POSITIVE, THIS IS AN INITIALISATION CALL SETTING UP A               ADS12310    KEYWORD VARIABLE, AND NOT FINDING IT CONSTITUTES A BUG.             ADS12320    IT ALSO MEANS THAT ONLY KTAB VALUES WHICH TAKEN OVER 1000           ADS12330    EQUAL INIT MAY BE CONSIDERED.  (THUS "STEPS", WHICH IS A            ADS12340    MOTION VERB AS WELL AS AN OBJECT, MAY BE LOCATED AS AN              ADS12350    OBJECT.)  AND IT ALSO MEANS THE KTAB VALUE IS TAKEN MOD             ADS12360    1000.                                                               ADS12370 */                                                                     ADS12380                                                                        ADS12390        DCL VOCRTN FIXED BIN(31);                                       ADS12400                                                                        ADS12410         DO I=1 TO TABSIZ;                                              ADS12420             IF KTAB(I) = -1 THEN GOTO L2;                              ADS12430             IF INIT >= 0 & KTAB(I)/1000 ^= INIT THEN GOTO L1;          ADS12440             IF ATAB(I) = ID THEN GOTO L3;                              ADS12450 L1:         END;                                                       ADS12460         CALL BUG(21);                                                  ADS12470                                                                        ADS12480 L2:     IF INIT < 0 THEN RETURN(-1);                                   ADS12490         CALL BUG(5);                                                   ADS12500                                                                        ADS12510 L3:     VOCRTN=KTAB(I);                                                ADS12520         IF INIT >= 0 THEN VOCRTN=MOD(VOCRTN,1000);                     ADS12530         RETURN(VOCRTN);                                                ADS12540         END;                                                           ADS12550                                                                        ADS12560                                                                        ADS12570                                                                        ADS12580 DSTROY: PROC (OBJECT);                                                 ADS12590                                                                        ADS12600         DCL OBJECT FIXED BIN(31);                                      ADS12610                                                                        ADS12620 /*                                                                     ADS12630    PERMANENTLY ELIMINATE "OBJECT" BY MOVING TO A                       ADS12640    NON-EXISTANT LOCATION.                                              ADS12650 */                                                                     ADS12660                                                                        ADS12670                                                                        ADS12680         CALL MOVE(OBJECT,0);                                           ADS12690         RETURN;                                                        ADS12700         END;                                                           ADS12710                                                                        ADS12720                                                                        ADS12730                                                                        ADS12740 JUGGLE: PROC (OBJECT);                                                 ADS12750                                                                        ADS12760         DCL OBJECT FIXED BIN(31);                                      ADS12770         DCL (I,J)  FIXED BIN(31);                                      ADS12780                                                                        ADS12790 /*                                                                     ADS12800    JUGGLE AN OBJECT BY PICKING IT UP AND PUTTING IT DOWN               ADS12810    AGAIN, THE PURPOSE BEING TO GET THE OBJECT TO THE FRONT             ADS12820    OF THE CHAIN OF THINGS AT ITS LOC.                                  ADS12830 */                                                                     ADS12840                                                                        ADS12850         I=PLACE(OBJECT);                                               ADS12860         J=FIXED(OBJECT);                                               ADS12870         CALL MOVE(OBJECT,I);                                           ADS12880         CALL MOVE(OBJECT+100,J);                                       ADS12890         RETURN;                                                        ADS12900         END;                                                           ADS12910                                                                        ADS12920                                                                        ADS12930                                                                        ADS12940 MOVE: PROC (OBJECT,WHERE);                                             ADS12950                                                                        ADS12960         DCL (OBJECT,WHERE) FIXED BIN(31);                              ADS12970                                                                        ADS12980 /*                                                                     ADS12990    PLACE ANY OBJECT ANYWHERE BY PICKING IT UP AND DROPPING             ADS13000    IT.  MAY ALREADY BE TOTING, IN WHICH CASE THE CARRY IS A            ADS13010    NO-OP.  MUSTN'T PICK UP OBJECTS WHICH ARE NOT AT ANY LOC,           ADS13020    SINCE CARRY WANTS TO REMOVE OBJECTS FROM ATLOC CHAINS.              ADS13030 */                                                                     ADS13040                                                                        ADS13050         IF OBJECT > 100 THEN GOTO L1;                                  ADS13060         FROM=PLACE(OBJECT);                                            ADS13070         GOTO L2;                                                       ADS13080 L1:     FROM=FIXED(OBJECT-100);                                        ADS13090 L2:     IF FROM > 0 & FROM <= 300 THEN CALL CARRY(OBJECT,FROM);        ADS13100         CALL DROP(OBJECT,WHERE);                                       ADS13110         RETURN;                                                        ADS13120         END;                                                           ADS13130                                                                        ADS13140                                                                        ADS13150                                                                        ADS13160 PUT: PROC (OBJECT,WHERE,PVAL) RETURNS(FIXED BIN(31));                  ADS13170                                                                        ADS13180         DCL (OBJECT,WHERE,PVAL) FIXED BIN(31);                         ADS13190                                                                        ADS13200 /*                                                                     ADS13210    PUT IS THE SAME AS MOVE, EXCEPT IT RETURNS A VALUE USED             ADS13220    TO SET UP THE NEGATED PROP VALUES FOR THE REPOSITORY                ADS13230    OBJECTS.                                                            ADS13240 */                                                                     ADS13250                                                                        ADS13260         CALL MOVE(OBJECT,WHERE);                                       ADS13270         RETURN((-1)-PVAL);                                             ADS13280         END;                                                           ADS13290                                                                        ADS13300                                                                        ADS13310                                                                        ADS13320 CARRY: PROC (OBJECT,WHERE);                                            ADS13330                                                                        ADS13340         DCL (OBJECT,WHERE) FIXED BIN(31);                              ADS13350                                                                        ADS13360 /*                                                                     ADS13370    START TOTING AN OBJECT, REMOVING IT FROM THE LIST OF                ADS13380    THINGS AT ITS FORMER LOCATION.  INCR HOLDNG UNLESS IT WAS           ADS13390    ALREADY BEING TOTED.  IF OBJECT>100 (MOVING "FIXED"                 ADS13400    SECOND LOC), DON'T CHANGE PLACE OR HOLDNG.                          ADS13410 */                                                                     ADS13420                                                                        ADS13430                                                                        ADS13440                                                                        ADS13450         IF OBJECT > 100 THEN GOTO L5;                                  ADS13460         IF PLACE(OBJECT) = -1 THEN RETURN;                             ADS13470         PLACE(OBJECT)=-1;                                              ADS13480         HOLDNG=HOLDNG+1;                                               ADS13490 L5:     IF ATLOC(WHERE) ^= OBJECT THEN GOTO L6;                        ADS13500         ATLOC(WHERE)=LINK(OBJECT);                                     ADS13510         RETURN;                                                        ADS13520 L6:     TEMP=ATLOC(WHERE);                                             ADS13530 L7:     IF LINK(TEMP) = OBJECT THEN GOTO L8;                           ADS13540         TEMP=LINK(TEMP);                                               ADS13550         GOTO L7;                                                       ADS13560 L8:     LINK(TEMP)=LINK(OBJECT);                                       ADS13570         RETURN;                                                        ADS13580         END;                                                           ADS13590                                                                        ADS13600                                                                        ADS13610                                                                        ADS13620 DROP: PROC (OBJECT,WHERE);                                             ADS13630                                                                        ADS13640         DCL (OBJECT,WHERE) FIXED BIN(31);                              ADS13650                                                                        ADS13660 /*                                                                     ADS13670    PLACE AN OBJECT AT A GIVEN LOC, PREFIXING IT ONTO THE               ADS13680    ATLOC LIST.  DECR HOLDNG IF THE OBJECT WAS BEING TOTED.             ADS13690 */                                                                     ADS13700                                                                        ADS13710         IF OBJECT > 100 THEN GOTO L1;                                  ADS13720         IF PLACE(OBJECT) = -1 THEN HOLDNG=HOLDNG-1;                    ADS13730         PLACE(OBJECT)=WHERE;                                           ADS13740         GOTO L2;                                                       ADS13750 L1:     FIXED(OBJECT-100)=WHERE;                                       ADS13760 L2:     IF WHERE <= 0 THEN RETURN;                                     ADS13770         LINK(OBJECT)=ATLOC(WHERE);                                     ADS13780         ATLOC(WHERE)=OBJECT;                                           ADS13790         RETURN;                                                        ADS13800         END;                                                           ADS13810                                                                        ADS138201/*  UTILITY ROUTINES (RAN, CIAO, BUG) */                               ADS13830                                                                        ADS13840 CIAO: PROC;                                                            ADS13850                                                                        ADS13860 /*                                                                     ADS13870    EXITS...NO MESSAGE OUTPUT SINCE CAN'T SAVE CORE IMAGE               ADS13880 */                                                                     ADS13890                                                                        ADS13900         STOP;                                                          ADS13910         END;                                                           ADS13920                                                                        ADS13930                                                                        ADS13940                                                                        ADS13950 BUG: PROC (NUM);                                                       ADS13960                                                                        ADS13970         DCL NUM FIXED BIN(31);                                         ADS13980                                                                        ADS13990 /*                                                                     ADS14000    THE FOLLOWING CONDITIONS ARE CURRENTLY CONSIDERED FATAL             ADS14010    BUGS.  NUMBERS < 20 ARE DETECTED WHILE READING THE                  ADS14020    DATABASE; THE OTHERS OCCUR AT "RUN TIME".                           ADS14030         0       MESSAGE LINE > 70 CHARACTERS                           ADS14040         1       NULL LINE IN MESSAGE                                   ADS14050         2       TOO MANY WORDS OF MESSAGES                             ADS14060         3       TOO MANY TRAVEL OPTIONS                                ADS14070         4       TOO MANY VOCABULARY WORDS                              ADS14080         5       REQUIRED VOCABULARY WORD NOT FOUND                     ADS14090         6       TOO MANY RTEXT OR MTEXT MESSAGES                       ADS14100         7       TOO MANY HINTS                                         ADS14110         8       LOCATION HAS COND BIT BEING SET TWICE                  ADS14120         9       INVALID SECTION NUMBER IN DATABASE                     ADS14130         20      SPECIAL TRAVEL (500>L>300) EXCEEDS GOTO LIST           ADS14140         21      RAN OFF END OF VOCABULARY TABLE                        ADS14150         22      VOCABULARY TYPE (N/1000) NOT BETWEEN 0 AND 3           ADS14160         23      INTRANSITIVE ACTION VERB EXCEEDS GOTO LIST             ADS14170         24      TRANSITIVE ACTION VERB EXCEEDS GOTO LIST               ADS14180         25      CONDITIONAL TRAVEL ENTRY WITH NO ALTERNATIVE           ADS14190         26      LOCATION HAS NO TRAVEL ENTRIES                         ADS14200         27      HINT NUMBER EXCEEDS GOTO LIST                          ADS14210         28      INVALID MONTH RETURNED BY DATE FUNCTION                ADS14220 */                                                                     ADS14230                                                                        ADS14240                                                                        ADS14250         PUT STRING (OUTSTR) EDIT ('Fatal error # ',NUM) (A,F(2));      ADS14260         CALL LINEOUT;                                                  ADS14270         STOP;                                                          ADS14280         END;                                                           ADS14290                                                                        ADS14300 LINESKP: PROC;                                                         ADS14310                                                                        ADS14320 /* OUTPUTS A BLANK LINE */                                             ADS14330                                                                        ADS14340         OUTSTR=' ';                                                    ADS14350         CALL LINEOUT;                                                  ADS14360         RETURN;                                                        ADS14370         END;                                                           ADS14380                                                                        ADS14390 LINEOUT: PROC;                                                         ADS14400                                                                        ADS14410 /* OUTPUT A LINE TO MILTEN */                                          ADS14420                                                                        ADS14430         INSTR=OUTSTR;                                                  ADS14440         IF LOGON & OUTSTR ^= ' ' THEN                                  ADS14450              PUT SKIP EDIT (OUTSTR) (A);                               ADS14460         CCODE=0;                                                       ADS14470         DO WHILE (CCODE = 0);                                          ADS14480             CALL TWRITE(INSTR,LENGTH(OUTSTR),CCODE);                   ADS14490             END;                                                       ADS14500         RETURN;                                                        ADS14510         END;                                                           ADS14520                                                                        ADS14530 RAN: PROC (N) RETURNS (FIXED BIN(31));                                 ADS14540                                                                        ADS14550 /* RETURNS RANDOM NUMBER BETWEEN 0 AND N-1 */                          ADS14560                                                                        ADS14570         DCL N FIXED BIN(31);                                           ADS14580         DCL RANRTN FIXED BIN(31);                                      ADS14590                                                                        ADS14600         RANRTN=N;                                                      ADS14610         DO WHILE (RANRTN = N);                                         ADS14620             CALL RANDU(IX,IY,Y);                                       ADS14630             IX=IY;                                                     ADS14640             RANRTN=Y*N;                                                ADS14650             END;                                                       ADS14660         RETURN(RANRTN);                                                ADS14670         END;                                                           ADS14680                                                                        ADS14690                                                                        ADS14700   END ADSETUP;                                                         ADS14710